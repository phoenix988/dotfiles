#+TITLE: NVIM Configuration
#+DESCRIPTION: This is my configuration file for NVIM written in lua
#+AUTHOR: Karl Fredin


* TABLE OF CONTENTS
- [[Neovim]]
- [[Keybindings]]
   - [[File Management]]
   - [[Theme]]
   - [[Source]]
   - [[Window]]
- [[Config]]
  - [[Init]]
  - [[Bootstrap]]
  - [[Standard Remaps]]
  - [[Standard Sets]]
  - [[Packer]]
  - [[Plugins]]
     - [[Barbar]]
     - [[Colors]]
     - [[Fugitive]]
     - [[Harpoon]]
     - [[Lastplace]]
     - [[Lsp-zero]]
     - [[Lualine]]
     - [[NerdTree]]
     - [[nord]]
     - [[Orgmode]]
     - [[Suda]]
     - [[Telescope]]
     - [[Treesitter]]
     - [[Undotree]]
     - [[Whichkey]]
     - [[Dashboard]]


* Neovim
My neovim config written in lua. I wrote it using org mode because it makes it easier
to make changes to the config when you have multiple files to play around with.
And also Im not sure if the auto install works with this config so you might get a bunch of errors
if you just clone this config and try and run this config


** Keybindings
This is all my custome keybindings atleast most of the important ones.
Of course neovim has more builtin commands but I dont list them here.

*** File Management
| Command                | Description                     | Keybinding |
|------------------------+---------------------------------+------------|
| Ex                     | Open built in explorer          | SPC p v    |
| Vifm                   | Open vifm file manager          | SPC .      |
| Telescope find_files   | Find files in telescope         | SPC f f    |
| Telescope git_files    | Find files in a git repo        | C-p        |
| Telescope recent_files | Find recent files               | SPC f r    |
| Telescope file_browser | Open file browser               | SPC o -    |
| NerdTree               | Toggle NerdTree                 | F5         |
| NerdTreeFind           | Toggle NerdTree in current dir  | F6         |
| Grep                   | Grep a string of text in a file | SPC p s    |
| mark.add_file          | Add a file in harpoon           | SPC a      |
| ui.toggle_quick_menu   | Open harpoon menu               | C-e        |
| ui.nav_file(1-9)       | Navigate the harpoon files      | C-(1-9)    |

*** Theme
| Command               | Description            | Keybinding |
|-----------------------+------------------------+------------|
| HighlightColorsToggle | Toggle color highlight | SPC c h    |
| Telescope colorscheme | change colorscheme     | SPC h t    |

*** Source
| Command    | Description     | Keybinding |
|------------+-----------------+------------|
| PackerSync | Sync Plugins    | SPC h r    |
| Source     | Source lua file | SPC h s    |

*** Window
| Command     | Description       | Keybinding |
|-------------+-------------------+------------|
| BufferNext  | Next buffer       | SPC b n    |
| BufferPrev  | Previous Buffer   | SPC b p    |
| BufferClose | Kill buffer       | SPC b k    |
| Tabnew      | Open new tab      | SPC t n    |
| Tabclose    | close current tab | SPC t n    |
| Dashboard   | Move to dashboard | SPC d      |


* Config
** Init
Source all my lua files
#+begin_src lua :tangle init.lua
require("karl.remap")
require("karl.set")
require("karl.packer")
require("karl.bootstrap")
#+end_src

** Bootstrap
This automatically download packer if you want to use this config on a new install
#+begin_src lua :tangle lua/karl/bootstrap.lua
local fn = vim.fn
local install_path = fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"

if fn.empty(fn.glob(install_path)) > 0 then
	packer_bootstrap =
		fn.system({ "git", "clone", "--depth", "1", "https://github.com/wbthomason/packer.nvim", install_path })
	vim.cmd([[packadd packer.nvim]])
end
#+end_src

** Standard Remaps
Sets some standard keybindings here
#+begin_src lua :tangle lua/karl/remap.lua
vim.g.mapleader = " "
vim.keymap.set("n", "<leader>pv", vim.cmd.Ex)
vim.keymap.set("n", "<leader>.", vim.cmd.Vifm)
vim.keymap.set("n", "<leader>hr", vim.cmd.PackerSync)
vim.keymap.set("n", "<leader>hs", vim.cmd.so)
vim.keymap.set("n", "<leader>bn", vim.cmd.BufferNext)
vim.keymap.set("n", "<leader>bp", vim.cmd.BufferPrevious)
vim.keymap.set("n", "<leader>bk", vim.cmd.BufferClose)
vim.keymap.set("n", "gt", vim.cmd.BufferNext)
vim.keymap.set("n", "gT", vim.cmd.BufferPrevious)
#+end_src

** Standard Sets
Some standard neovim settings based on your prefrence
like line numbers,save undo after session etc
#+begin_src lua :tangle lua/karl/set.lua
vim.wo.relativenumber = true
vim.opt.nu = true


vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.shiftwidth = 4
vim.opt.tabstop = 4
vim.opt.expandtab = true

vim.opt.smartindent = true

vim.opt.wrap = false

vim.opt.swapfile = false
vim.opt.backup = false
vim.opt.undodir = os.getenv("HOME") .. "/.vim/undodir"
vim.opt.undofile = true

vim.opt.hlsearch = false
vim.opt.incsearch = true

vim.opt.termguicolors = true

vim.opt.scrolloff = 8
vim.opt.signcolumn = "yes"
vim.opt.isfname:append("@-@")

vim.opt.updatetime = 50
--
vim.opt.updatetime = 50
#+end_src

** Packer
Install all my plugins using packer
#+begin_src lua tangle: lua/karl/packer.lua
-- This file can be loaded by calling `lua require('plugins')` from your init.vim

-- Only required if you have packer configured as `opt`
vim.cmd [[packadd packer.nvim]]

return require('packer').startup(function(use)
  -- Packer can manage itself
  use 'wbthomason/packer.nvim'

-- Install telescopes to navigate recentfiles and have a file explorer in vim
use {
   'nvim-telescope/telescope.nvim', tag = '0.1.1',
   requires = { {'nvim-lua/plenary.nvim'} }
}
use {"smartpde/telescope-recent-files"}
use {
    "nvim-telescope/telescope-file-browser.nvim",
    requires = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" }
}

-- Install prefefered colorschemes
use({ 'shaunsingh/nord.nvim', as = 'nord' })
use({ 'rose-pine/neovim', as = 'rose-pine' })

-- Tresitter to improve colors in your files
use('nvim-treesitter/nvim-treesitter', {run = ':TSUpdate'})
use('nvim-treesitter/playground')

-- Harpoon to quickly navigate commonly used files
use('ThePrimeagen/harpoon')

-- Nerdtree to have a file tree on the side to quickly navigate files
use('preservim/nerdtree')

-- Vifm inside of vim
use("vifm/vifm.vim")

-- Whichkey to see all your keybinding when you press the leaderkey
-- Similar to emacs
use("folke/which-key.nvim")

-- Undotree to see what you have done to the file
use('mbbill/undotree')


use 'nvim-tree/nvim-web-devicons'

-- Tabs
use {'romgrk/barbar.nvim', requires = 'nvim-web-devicons'}

-- Fancy status line for neovim
use {
  'nvim-lualine/lualine.nvim',
  requires = { 'nvim-tree/nvim-web-devicons', opt = true }
}

-- Terminal for vim
use {"akinsho/toggleterm.nvim", tag = '*', config = function()
  require("toggleterm").setup()
end}

-- Lsp for neovim for autocompletion and alot of other things
use {
  'VonHeikemen/lsp-zero.nvim',
  branch = 'v1.x',
  requires = {
    -- LSP Support
    {'neovim/nvim-lspconfig'},             -- Required
    {                                      -- Optional
      'williamboman/mason.nvim',
      run = function()
        pcall(vim.cmd, 'MasonUpdate')
      end,
    },
    {'williamboman/mason-lspconfig.nvim'}, -- Optional

    -- Autocompletion
    {'hrsh7th/nvim-cmp'},         -- Required
    {'hrsh7th/cmp-nvim-lsp'},     -- Required
    {'hrsh7th/cmp-buffer'},       -- Optional
    {'hrsh7th/cmp-path'},         -- Optional
    {'saadparwaiz1/cmp_luasnip'}, -- Optional
    {'hrsh7th/cmp-nvim-lua'},     -- Optional

    -- Snippets
    {'L3MON4D3/LuaSnip'},             -- Required
    {'rafamadriz/friendly-snippets'}, -- Optional
  }
}

-- Startscreen for neovim
use {
  'glepnir/dashboard-nvim',
  event = 'VimEnter',
  config = function()
    require('dashboard').setup {
      -- config
    }
  end,
  requires = {'nvim-tree/nvim-web-devicons'}
}

-- Lastplace to remember old location since you left the file last time
use('ethanholz/nvim-lastplace')

-- Orgmode for neovim not as good as emacs though
use('nvim-orgmode/orgmode')

-- Highlight colors inside of vim
use('brenoprata10/nvim-highlight-colors')

-- git client for vim
use("jreybert/vimagit")
use('tpope/vim-fugitive')

-- Save files as sudo
use('lambdalisue/suda.vim')


end)
#+end_src

** Plugins
This is all my configs for the various Plugins I have installed
*** Barbar
Settings for barbar plugin which gives you better tabs in neovim
#+begin_src lua :tangle after/plugin/barbar.lua
vim.keymap.set("n", "<Leader>tn", vim.cmd.tabnew)
vim.keymap.set("n", "<Leader>td", vim.cmd.tabclose)

vim.g.barbar_auto_setup = false -- disable auto-setup
require'barbar'.setup {
--
  -- Enable/disable animations
  animation = true,

  -- Enable/disable current/total tabpages indicator (top right corner)
  tabpages = true,

  clickable = true,

  -- Excludes buffers from the tabline
  exclude_ft = {'javascript'},
  exclude_name = {'package.json'},

  focus_on_close = 'left',

  -- Disable highlighting alternate buffers
  highlight_alternate = false,

  -- Disable highlighting file icons in inactive buffers
  highlight_inactive_file_icons = false,

  -- Enable highlighting visible buffers
  highlight_visible = true,

  icons = {
    -- Configure the base icons on the bufferline.
    buffer_index = false,
    buffer_number = false,
    button = '',
    -- Enables / disables diagnostic symbols
    diagnostics = {
      [vim.diagnostic.severity.ERROR] = {enabled = true, icon = 'ﬀ'},
      [vim.diagnostic.severity.WARN] = {enabled = false},
      [vim.diagnostic.severity.INFO] = {enabled = false},
      [vim.diagnostic.severity.HINT] = {enabled = true},
    },
    filetype = {

      custom_colors = false,

      -- Requires `nvim-web-devicons` if `true`
      enabled = true,
    },
    separator = {left = '▎', right = ''},

    -- Configure the icons on the bufferline when modified or pinned.
    -- Supports all the base icon options.
    modified = {button = '●'},
    pinned = {button = '車', filename = true, separator = {right = ''}},

    -- Configure the icons on the bufferline based on the visibility of a buffer.
    -- Supports all the base icon options, plus `modified` and `pinned`.
    alternate = {filetype = {enabled = false}},
    current = {buffer_index = true},
    inactive = {button = '×'},
    visible = {modified = {buffer_number = false}},
  },

  -- Sets the maximum padding width with which to surround each tab
  maximum_padding = 1,

  -- Sets the minimum padding width with which to surround each tab
  minimum_padding = 1,

  -- Sets the maximum buffer name length.
  maximum_length = 30,

  -- If set, the letters for each buffer in buffer-pick mode will be
  -- assigned based on their name. Otherwise or in case all letters are
  -- already assigned, the behavior is to assign letters in order of
  -- usability (see order below)
  semantic_letters = true,

  -- Set the filetypes which barbar will offset itself for
  sidebar_filetypes = {
    -- Use the default values: {event = 'BufWinLeave', text = nil}
    NvimTree = true,
    -- Or, specify the event which the sidebar executes when leaving:
    ['neo-tree'] = {event = 'BufWipeout'},
    -- Or, specify both
    Outline = {event = 'BufWinLeave', text = 'symbols-outline'},
  },

  -- New buffer letters are assigned in this order. This order is
  -- optimal for the qwerty keyboard layout but might need adjustment
  -- for other layouts.
  letters = 'asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP',

  -- Sets the name of unnamed buffers. By default format is "[Buffer X]"
  -- where X is the buffer number. But only a static string is accepted here.
  no_name_title = nil,
}
#+end_src


*** Colors
Sets colorscheme inside of neovim and configure neovim highlight
color plugin
#+begin_src lua  :tangle after/plugin/colors.lua
function ColorMyPencils(color)
         color = color or "nord"
	 vim.cmd.colorscheme(color)
        -- vim.api.nvim_set_hl(0, "Normal", { bg = "none" })
        -- vim.api.nvim_set_hl(0, "NormalFloat", { bg = "none" })
end

require("nvim-highlight-colors").turnOff()
require("nvim-highlight-colors").turnOn()
require("nvim-highlight-colors").toggle()

vim.keymap.set("n", "<Leader>ch", vim.cmd.HighlightColorsToggle)


ColorMyPencils()
#+end_src

*** Fugitive
Sets fugitive keybinding which is a gitclient in Neovim
#+begin_src lua :tangle after/plugin/fugitive.lua

vim.keymap.set("n", "<leader>gs", vim.cmd.Git)

#+end_src
*** Harpoon
Keybinding settings for harpoon plugin
#+begin_src lua :tangle after/plugin/harpoon.lua
local mark = require("harpoon.mark")
local ui = require("harpoon.ui")

vim.keymap.set("n", "<leader>a", mark.add_file)
vim.keymap.set("n", "<C-e>", ui.toggle_quick_menu)
vim.keymap.set("n", "<C-1>", function() ui.nav_file(1) end)
vim.keymap.set("n", "<C-2>", function() ui.nav_file(2) end)
vim.keymap.set("n", "<C-3>", function() ui.nav_file(3) end)
vim.keymap.set("n", "<C-4>", function() ui.nav_file(4) end)
vim.keymap.set("n", "<C-5>", function() ui.nav_file(5) end)
vim.keymap.set("n", "<C-6>", function() ui.nav_file(6) end)
vim.keymap.set("n", "<C-7>", function() ui.nav_file(7) end)
vim.keymap.set("n", "<C-8>", function() ui.nav_file(8) end)
vim.keymap.set("n", "<C-9>", function() ui.nav_file(9) end)

#+end_src
*** Lastplace
Lastplace never starts at the top of your files again
if you exit a file and come back to it this will remeber your last location
#+begin_src lua :tangle after/plugin/lastplace.lua
require'nvim-lastplace'.setup {
    lastplace_ignore_buftype = {"quickfix", "nofile", "help"},
    lastplace_ignore_filetype = {"gitcommit", "gitrebase", "svn", "hgcommit"},
    lastplace_open_folds = true
}

#+end_src
*** Lsp-zero
Configure LSP zero for autocompletion and a ton of other features
check there github for more info you can do a ton with this plugin
#+begin_src lua :tangle after/plugin/lsp.lua
local lsp = require('lsp-zero')

lsp.preset('recommended')


lsp.on_attach(function(client, bufnr)
  lsp.default_keymaps({buffer = bufnr})
end)

-- When you don't have mason.nvim installed
-- You'll need to list the servers installed in your system
lsp.setup_servers({'tsserver', 'eslint'})

lsp.set_preferences({
	sign_icons = { }
})

local cmp = require('cmp')
local cmp_select = {behavior = cmp.SelectBehavior.Select}
local cmp_mappings = lsp.defaults.cmp_mappings({
	['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
	['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
	['<C-y>'] = cmp.mapping.confirm({ select = true }),
	['<C-Space>'] = cmp.mapping.complete(),
})


lsp.setup()

#+end_src
*** Lualine
Settings for lualine which is the status bar you see att the bottom of neovim.
Here you can customize it to your liking
#+begin_src lua :tangle after/plugin/lualine.lua
require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'auto',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    globalstatus = false,
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff', 'diagnostics'},
    lualine_c = {'filename'},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  winbar = {},
  inactive_winbar = {},
  extensions = {}
}

#+end_src
*** NerdTree
Keybindings to quickly access NerdTree
#+begin_src lua  :tangle after/plugin/nerdtree.lua

vim.keymap.set("n", "<F5>", vim.cmd.NERDTreeToggle)
vim.keymap.set("n", "<F6>", vim.cmd.NERDTreeFind)

#+end_src
*** Orgmode
Settings for orgmode inside of Neovim so you get syntax highlightning inside of Neovim
Similar to emacs but please keep in mind that you wont have the same features as in emacs
#+begin_src lua :tangle after/plugin/orgmode.lua
-- init.lua

-- Load custom treesitter grammar for org filetype
require('orgmode').setup_ts_grammar()

-- Treesitter configuration
require('nvim-treesitter.configs').setup {
  -- If TS highlights are not enabled at all, or disabled via `disable` prop,
  -- highlighting will fallback to default Vim syntax highlighting
  highlight = {
    enable = true,
    -- Required for spellcheck, some LaTex highlights and
    -- code block highlights that do not have ts grammar
    additional_vim_regex_highlighting = {'org'},
  },
  ensure_installed = {'org'}, -- Or run :TSUpdate org
}

require('orgmode').setup({
  org_agenda_files = {'~/Dropbox/org/*', '~/my-orgs/**/*'},
  org_default_notes_file = '~/Dropbox/org/refile.org',
})

#+end_src
*** Suda
Keybinding to save files as sudo
#+begin_src lua :tangle after/plugin/sudo.lua

vim.keymap.set('n', '<Leader>fs', vim.cmd.SudaWrite)

#+end_src
*** Telescope
Keybindings to access telescope which lets you quickly access files
My favorite is to quickly access recent files. Which makes it so you can access
files super fast
#+begin_src lua :tangle after/plugin/telescope.lua

local builtin = require('telescope.builtin')
vim.keymap.set('n', '<leader>ff', builtin.find_files, {})
vim.keymap.set('n', '<C-p>', builtin.git_files, {})
vim.keymap.set('n', '<Leader>ht', builtin.colorscheme, {})
vim.keymap.set('n', '<leader>ps', function()
builtin.grep_string({ search = vim.fn.input("Grep >") } );


end)

require("telescope").load_extension("recent_files")

vim.api.nvim_set_keymap("n", "<Leader>fr",
  [[<cmd>lua require('telescope').extensions.recent_files.pick()<CR>]],
  {noremap = true, silent = true})

require("telescope").load_extension "file_browser"

vim.api.nvim_set_keymap(
  "n",
  "<space>o-",
  ":Telescope file_browser",
  { noremap = true }
)

vim.api.nvim_set_keymap(
  "n",
  "<space>fb",
  ":Telescope file_browser",
  { noremap = true }
)


#+end_src
*** Treesitter
Treesitter config this makes colors inside your files way better
Syntax highlighning is way better with this plugin
#+begin_src lua :tangle after/plugin/treesitter.lua
require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all" (the five listed parsers should always be installed)
 ensure_installed = { "javascript", "typescript", "c", "lua", "vim", "vimdoc", "query" },

 -- Install parsers synchronously (only applied to `ensure_installed`)
 sync_install = false,

 -- Automatically install missing parsers when entering buffer
 -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
 auto_install = true,

 highlight = {
   enable = true,

   -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
   -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
   -- Using this option may slow down your editor, and you may see some duplicate highlights.
   -- Instead of true it can also be a list of languages
   additional_vim_regex_highlighting = false,
 },
}
#+end_src

*** Undotree
Undotree keybinding to quickly access your undotreewhere you can see
changes you have done to your file
#+begin_src lua :tangle after/plugin/undotree.lua
vim.keymap.set("n", "<Leader>u", vim.cmd.UndotreeToggle)
#+end_src

*** Whichkey
Settings for whichkey which is what you see when your
press your leader key and wait for a few seconds.
It's very similar to the one you see in emacs but les useful imo
#+begin_src lua :tangle after/plugin/whichkey.lua
local status, which_key = pcall(require, "which-key")
if not status then
	return
end

which_key.setup({
-- your configuration comes here
	-- or leave it empty to use the default settings
})
#+end_src

*** Dashboard
Dashboard settings so you can customize the settings of your dashboard
It has a ton of settings so check there github for the settings that you can use.
Also set a keybinding so I can quickly access my dashboard
#+begin_src lua :tangle after/plugin/dashboard.lua
vim.g.dashboard_default_executive = 'telescope'
vim.g.default_banner = {
	[[ ███╗   ██╗ ███████╗ ██████╗  ██╗   ██╗ ██╗ ███╗   ███╗]],
	[[ ████╗  ██║ ██╔════╝██╔═══██╗ ██║   ██║ ██║ ████╗ ████║]],
	[[ ██╔██╗ ██║ █████╗  ██║   ██║ ██║   ██║ ██║ ██╔████╔██║]],
	[[ ██║╚██╗██║ ██╔══╝  ██║   ██║ ╚██╗ ██╔╝ ██║ ██║╚██╔╝██║]],
	[[ ██║ ╚████║ ███████╗╚██████╔╝  ╚████╔╝  ██║ ██║ ╚═╝ ██║]],
	[[ ╚═╝  ╚═══╝ ╚══════╝ ╚═════╝    ╚═══╝   ╚═╝ ╚═╝     ╚═╝]],
	[[,                                                      ]],
	[[TIP: To exit Neovim, just power off your computer.     ]],
 }

vim.keymap.set('n', '<Leader>d', vim.cmd.Dashboard)

#+end_src
