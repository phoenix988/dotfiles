#+TITLE: Neovim
#+DESCRIPTION: This is my configuration file for NVIM written in lua
#+AUTHOR: Karl Fredin

[[file:./images/Neovim-logo.svg.png]]

* TABLE OF CONTENTS
- [[NEOVIM]]
- [[INSTALL]]
- [[KEYBINDINGS]]
  - [[FILE MANAGEMENT]]
  - [[THEME]]
  - [[SOURCE]]
  - [[WINDOW]]
- [[CONFIG]]
  - [[INIT]]
  - [[LAZY]]
  - [[SESSION]]
  - [[STANDARD REMAPS]]
  - [[PLUGIN REMAPS]]
  - [[STANDARD SETS]]
  - [[PLUGINS]]
    - [[BARBAR]]
    - [[COLORS]]
    - [[HARPOON]]
    - [[ICEBERG]]
    - [[LASTPLACE]]
    - [[LSP-ZERO]]

 - [[LUALINE]]
    - [[NERDTREE]]
    - [[ORGMODE]]
    - [[TREESITTER]]
    - [[WHICHKEY]]


* NEOVIM
My neovim config written in lua. I wrote this config using org mode because it makes it easier
to update the config when you have multiple files to play around with. And org mode is fantastic for making alot of comments.
If you use this config it should install all the plugins automatically. But I'm not sure if the auto install works with this config so you might get a bunch of errors
when you first launch nvim with my config. But it should autoinstall when you ignore all the errors. And then do a quick restart of nvim and you should be good

** INSTALL
To install my config. Run these commands. Remember to backup your current nvim
configs if you have it. And then launch neovim and plugins should install automatically.
I am using lazyvim as plugin manager.
#+BEGIN_SRC sh
# Creating backup of existing config if you have
cp -r $HOME/.config/nvim $HOME/.config/nvim.bak

# Obs this will remove your neovim config
rm -rf $HOME/.config/nvim

# Remove meta data to avoid problems
rm rf $HOME/.local/share/nvim
rm -rf $HOME/.cache/nvim

git clone -b neovim https://github.com/phoenix988/dotfiles.git ~/.config/nvim
#+END_SRC

#+RESULTS:

** KEYBINDINGS
This is some of the most important keybindings to know. Of course you also
Need to know the most basic vim commands too which I dont list here but I assume you
already know them.

*** FILE MANAGEMENT
Commands to quickly move around files in neovim
| Command                | Description                     | Keybinding |
|------------------------+---------------------------------+------------|
| Ex                     | Open built in explorer          | SPC p v    |
| Vifm                   | Open vifm file manager          | SPC .      |
| Telescope find_files   | Find files in telescope         | SPC f f    |
| Telescope recent_files | Find recent files               | SPC f r    |
| mark.add_file          | Add a file in harpoon           | SPC a      |
| ui.toggle_quick_menu   | Open harpoon menu               | C-e        |
| ui.nav_file(1-9)       | Navigate the harpoon files      | C-(1-9)    |
| Grep                   | Grep a string of text in a file | SPC p s    |
| NerdTreeToggleFocus    | Focus NerdTree                  | F6         |
| NeoTreeToggle          | Toggle NeoTree                  | SPC f t    |
| NeoTreeFloat           | Toggle NeoTree in floating mode | SPC n f    |
| Neotree .              | Open Neotree in current dir     | SPC n .    |
| Neotree ~              | Open Neotree in home            | SPC n h    |

*** THEME
Commands to change theme plus highlight colors
| Command               | Description            | Keybinding |
|-----------------------+------------------------+------------|
| HighlightColorsToggle | Toggle color highlight | SPC c h    |
| Telescope colorscheme | change colorscheme     | SPC h t    |

*** SOURCE
Update plugins and source new config using these commands
| Command    | Description     | Keybinding |
|------------+-----------------+------------|
| PackerSync | Sync Plugins    | SPC h r    |
| Source     | Source lua file | SPC h s    |

*** WINDOW
Create new tabs and manipulate buffers using these commands
| Command     | Description       | Keybinding |
|-------------+-------------------+------------+-
| BufferNext  | Next buffer       | SPC b n    |
| BufferPrev  | Previous Buffer   | SPC b p    |
| BufferClose | Kill buffer       | SPC b k    |
| Tabnew      | Open new tab      | SPC t n    |
| Tabclose    | close current tab | SPC t n    |
| Dashboard   | Move to dashboard | SPC d      |

*** GIT
Open fugitive to manage git repos. OBS you need to be in a git repository for it to work
| Command             | Description              | Keybinding |
|---------------------+--------------------------+------------|
| Telescope git_files | Find files in a git repo | SPC g f    |
| Git                 | Open git status          | SPC g g    |


* CONFIG
** INIT
Source all my lua files and set my leaderkey. I keep this config very light
#+begin_src lua :tangle init.lua
-- set space as leader
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '

require("karl.lazy")
require("karl.remap")
require("karl.set")
#+end_src



** DASH
Sets the logo of neovim based on the day of the week
#+begin_src lua :tangle lua/karl/dash.lua
local os = require("os")

local function setLogo()

    local dayOfWeek = os.date("%A")

    if dayOfWeek == "Friday" or dayOfWeek == "friday" then
      local logo = [[

            ███████╗██████╗ ██╗██████╗  █████╗ ██╗   ██╗
            ██╔════╝██╔══██╗██║██╔══██╗██╔══██╗╚██╗ ██╔╝
            █████╗  ██████╔╝██║██║  ██║███████║ ╚████╔╝
            ██╔══╝  ██╔══██╗██║██║  ██║██╔══██║  ╚██╔╝
            ██║     ██║  ██║██║██████╔╝██║  ██║   ██║
            ╚═╝     ╚═╝  ╚═╝╚═╝╚═════╝ ╚═╝  ╚═╝   ╚═╝
            ]]
      return logo
    elseif dayOfWeek == "Thursday" or dayOfWeek == "thursday" then
      local logo = [[
            ████████╗██╗  ██╗██╗   ██╗██████╗ ███████╗██████╗  █████╗ ██╗   ██╗
            ╚══██╔══╝██║  ██║██║   ██║██╔══██╗██╔════╝██╔══██╗██╔══██╗╚██╗ ██╔╝
               ██║   ███████║██║   ██║██████╔╝███████╗██║  ██║███████║ ╚████╔╝
               ██║   ██╔══██║██║   ██║██╔══██╗╚════██║██║  ██║██╔══██║  ╚██╔╝
               ██║   ██║  ██║╚██████╔╝██║  ██║███████║██████╔╝██║  ██║   ██║
               ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═════╝ ╚═╝  ╚═╝   ╚═╝
             ]]

      return logo
    else
        local logo = [[
            ██████╗  █████╗ ███████╗██╗  ██╗██████╗  ██████╗  █████╗ ██████╗ ██████╗
            ██╔══██╗██╔══██╗██╔════╝██║  ██║██╔══██╗██╔═══██╗██╔══██╗██╔══██╗██╔══██╗
            ██║  ██║███████║███████╗███████║██████╔╝██║   ██║███████║██████╔╝██║  ██║
            ██║  ██║██╔══██║╚════██║██╔══██║██╔══██╗██║   ██║██╔══██║██╔══██╗██║  ██║
            ██████╔╝██║  ██║███████║██║  ██║██████╔╝╚██████╔╝██║  ██║██║  ██║██████╔╝
            ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝
            ]]

        return logo
    end

end

return setLogo

#+end_src
** LAZY
#+begin_src lua :tangle lua/karl/lazy.lua
-- Install package manager

--    https://github.com/folke/lazy.nvim
--    `:help lazy.nvim.txt` for more info
local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'


if not vim.loop.fs_stat(lazypath) then
  vim.fn.system {
    'git',
    'clone',
    '--filter=blob:none',
    'https://github.com/folke/lazy.nvim.git',
    '--branch=stable', -- latest stable release
    lazypath,
  }
end
vim.opt.rtp:prepend(lazypath)

require('lazy').setup({

  -- Git related plugins
  'tpope/vim-fugitive',
  'NeogitOrg/neogit',
  'tpope/vim-rhubarb',
  "jreybert/vimagit",

  -- Detect tabstop and shiftwidth automatically
  'tpope/vim-sleuth',

  {
    "kdheepak/lazygit.nvim",
    -- optional for floating window border decoration
    dependencies = {
       "nvim-lua/plenary.nvim",
  },
  },

  -- Wilder vim
  {
    'gelguy/wilder.nvim',
    config = function()
      -- config goes here
    end,
  },
  -- Dashboard settings
  {
    "goolord/alpha-nvim",
     event = "VimEnter",
     opts = function()
      local dashboard = require("alpha.themes.dashboard")
      local myConfig = "/home/karl/.config/nvim/README.org"
      local logo = [[
            ███████╗██████╗ ██╗██████╗  █████╗ ██╗   ██╗
            ██╔════╝██╔══██╗██║██╔══██╗██╔══██╗╚██╗ ██╔╝
            █████╗  ██████╔╝██║██║  ██║███████║ ╚████╔╝
            ██╔══╝  ██╔══██╗██║██║  ██║██╔══██║  ╚██╔╝
            ██║     ██║  ██║██║██████╔╝██║  ██║   ██║
            ╚═╝     ╚═╝  ╚═╝╚═╝╚═════╝ ╚═╝  ╚═╝   ╚═╝
            ]]
      dashboard.section.header.val = vim.split(logo, "\n")
      dashboard.section.buttons.val = {
        dashboard.button("f", " " .. " Find file", ":Telescope find_files <CR>"),
        dashboard.button("n", " " .. " New file", ":ene <BAR> startinsert <CR>"),
        dashboard.button("r", " " .. " Recent files", ":Telescope oldfiles <CR>"),
        dashboard.button("g", " " .. " Find text", ":Telescope live_grep <CR>"),
        dashboard.button("c", " " .. " Config", ":e" .. myConfig .. "<CR>"),
        dashboard.button("s", " " .. " Restore Session", [[:LoadSession <cr>]]),
        dashboard.button("l", "󰒲 " .. " Lazy", ":Lazy<CR>"),
        dashboard.button("q", " " .. " Quit", ":qa<CR>"),
      }
      for _, button in ipairs(dashboard.section.buttons.val) do
        button.opts.hl = "AlphaButtons"
        button.opts.hl_shortcut = "AlphaShortcut"
      end
      dashboard.opts.layout[1].val = 8
      return dashboard
    end,
    config = function(_, dashboard)
      -- close Lazy and re-open when the dashboard is ready
      if vim.o.filetype == "lazy" then
        vim.cmd.close()
        vim.api.nvim_create_autocmd("User", {
          pattern = "AlphaReady",
          callback = function()
            require("lazy").show()
          end,
        })
      end

      require("alpha").setup(dashboard.opts)

      vim.api.nvim_create_autocmd("User", {
        pattern = "LazyVimStarted",
        callback = function()
          local stats = require("lazy").stats()
          local ms = (math.floor(stats.startuptime * 100 + 0.5) / 100)
          dashboard.section.footer.val = "⚡ Neovim loaded " .. stats.count .. " plugins in " .. ms .. "ms"
          pcall(vim.cmd.AlphaRedraw)
        end,
      })
    end,
  },

  -- NOTE: This is where your plugins related to LSP can be installed.
  --  The configuration is done below. Search for lspconfig to find it below.
  { 'VonHeikemen/lsp-zero.nvim', dependencies = {'neovim/nvim-lspconfig'} },
  {'williamboman/mason-lspconfig.nvim'},
  { -- LSP Configuration & Plugins
    'neovim/nvim-lspconfig',
    dependencies = {
      -- Automatically install LSPs to stdpath for neovim
      { 'williamboman/mason.nvim', config = true },
      'williamboman/mason-lspconfig.nvim',

      -- Useful status updates for LSP
      -- NOTE: `opts = {}` is the same as calling `require('fidget').setup({})`
      { 'j-hui/fidget.nvim', opts = {} },

      -- Additional lua configuration, makes nvim stuff amazing!
      'folke/neodev.nvim',
    },
  },

  { -- Autocompletion
    'hrsh7th/nvim-cmp',
    dependencies = { 'hrsh7th/cmp-nvim-lsp', 'L3MON4D3/LuaSnip', 'saadparwaiz1/cmp_luasnip' },
  },
    {'hrsh7th/cmp-nvim-lsp'},     -- Required
    {'hrsh7th/cmp-buffer'},       -- Optional
    {'hrsh7th/cmp-path'},         -- Optional
    {'saadparwaiz1/cmp_luasnip'}, -- Optional
    {'hrsh7th/cmp-nvim-lua'},     -- Optional

    -- Snippets
    {'L3MON4D3/LuaSnip'},             -- Required
    {'rafamadriz/friendly-snippets'}, -- Optional


    -- Highlight colors inside of vim
    {'brenoprata10/nvim-highlight-colors'},

    -- Orgmode
    { 'nvim-orgmode/orgmode' },

    -- Save as sudo
    {'lambdalisue/suda.vim'},

    {'akinsho/toggleterm.nvim'},

    -- Useful plugin to show you pending keybinds.
    { 'folke/which-key.nvim',

    opts = {} },
    { -- Adds git releated signs to the gutter, as well as utilities for managing changes
      'lewis6991/gitsigns.nvim',
      opts = {
        -- See `:help gitsigns.txt`
        signs = {
          add = { text = '+' },
          change = { text = '~' },
          delete = { text = '_' },
          topdelete = { text = '‾' },
          changedelete = { text = '~' },
        },
      },
    },

  { -- Some more themes
  'navarasu/onedark.nvim',
  'phoenix988/iceberg.nvim',
  'rose-pine/neovim',
  'Mofiqul/dracula.nvim',
  'folke/tokyonight.nvim',
  'shaunsingh/nord.nvim',
  'ribru17/bamboo.nvim',
  },

  { -- Set lualine as statusline
    'nvim-lualine/lualine.nvim',
    -- See `:help lualine.txt`
    opts = {
      options = {
        icons_enabled = false,
        component_separators = '|',
        section_separators = '',
      },
    },
  },

  --{ -- Add indentation guides even on blank lines
  --  'lukas-reineke/indent-blankline.nvim',
  --  -- Enable `lukas-reineke/indent-blankline.nvim`
  --  -- See `:help indent_blankline.txt`
  --  opts = {
  --    char = '┊',
  --    show_trailing_blankline_indent = false,
  --  },
  --},

  -- "gc" to comment visual regions/lines
  { 'numToStr/Comment.nvim', opts = {} },

  -- Fuzzy Finder (files, lsp, etc)
  { 'nvim-telescope/telescope.nvim', version = '*', dependencies = { 'nvim-lua/plenary.nvim' } },
  { 'smartpde/telescope-recent-files'},
  { 'nvim-telescope/telescope-file-browser.nvim', version = '*', dependencies = { 'nvim-lua/plenary.nvim' } },

   -- Harpoon
  { 'ThePrimeagen/harpoon' },
  -- Vifm file manager
  { 'vifm/vifm.vim' },
  -- Undotree to see history of a file
  { 'mbbill/undotree' },

  -- Neotree
  {'nvim-tree/nvim-web-devicons'},
  { 'nvim-neo-tree/neo-tree.nvim', dependencies = { "nvim-lua/plenary.nvim",
                                                    "nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
                                                    "MunifTanjim/nui.nvim", } },
  -- Neovim tree
  { 'nvim-tree/nvim-tree.lua' },


  -- Which key gives hint about keybindings
  { 'folke/which-key.nvim' },


  -- Barbar better tabs
  { 'romgrk/barbar.nvim', dependencies = { 'nvim-web-devicons' } },

  -- Lastplace remeber your last posisition
  {'ethanholz/nvim-lastplace'},

  -- Fuzzy Finder Algorithm which requires local dependencies to be built.
  -- Only load if `make` is available. Make sure you have the system
  -- requirements installed.
  {
    'nvim-telescope/telescope-fzf-native.nvim',
    -- NOTE: If you are having trouble with this installation,
    --       refer to the README for telescope-fzf-native for more instructions.
    build = 'make',
    cond = function()
      return vim.fn.executable 'make' == 1
    end,
  },

  { -- Highlight, edit, and navigate code
    'nvim-treesitter/nvim-treesitter',
    dependencies = {
      'nvim-treesitter/nvim-treesitter-textobjects',
    },
    build = ":TSUpdate",
  },

    {
      "kylechui/nvim-surround",
      config = function()
          require("nvim-surround").setup({
              -- Configuration here, or leave empty to use defaults
          })
      end
  },

  -- Vimwiki
  { "chipsenkbeil/vimwiki.nvim" },

  -- yazi
  {"DreamMaoMao/yazi.nvim",},


}, {})

#+end_src


** SESSION
#+begin_src lua :tangle after/plugin/session.lua
function saveSession()
  local sessionFile = "last_session"
  local sessionPath = vim.fn.expand('~/.local/share/nvim/' .. sessionFile)
  vim.cmd('mksession! ' .. sessionPath)
  print('Session saved to: ' .. sessionPath)
end

function loadSession()
  local sessionFile = "last_session"
  local sessionPath = vim.fn.expand('~/.local/share/nvim/' .. sessionFile)
  vim.cmd('source ' .. sessionPath)
  print('Session loaded from: ' .. sessionPath)
end

vim.cmd("command! SaveSession lua saveSession()")
vim.cmd("command! LoadSession lua loadSession()")

#+end_src

** STANDARD REMAPS
Sets some standard keybindings here. These keybindings are builtin
and doesnt requre the any plugins to be installed. Also sets the spacebar as leaderkey
#+begin_src lua :tangle lua/karl/remap.lua

-- Built in File explorer in neovim
vim.keymap.set("n", "<leader>fv", vim.cmd.Ex)

-- Source a file
vim.keymap.set("n", "<leader>hs", vim.cmd.so)

#+end_src

** PLUGIN REMAPS
Here I set various keybindings for all my plugins that I have installed.
I choose to do it all here so I have it all in one place because it's easier to manage for me
#+BEGIN_SRC lua :tangle after/plugin/keymap.lua
-- Vifm
vim.api.nvim_set_keymap("n", "<leader>.", ':Yazi<CR>' ,{ noremap = true, silent = true })

-- Quickly move between windows
vim.api.nvim_set_keymap("n", "<leader>bn", ':BufferNext' ,{ noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>bp", ':BufferPrevious<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>bk", ':BufferClose<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>tn", ':tabnew<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>td", ':tabclose<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>ch", ':HighlightColorsToggle<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "gt", ':BufferNext<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "gT", ':BufferPrevious<CR>', { noremap = true, silent = true })

-- Tab between splits
vim.api.nvim_set_keymap("n", "<Tab>", '<C-W>w', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<S-Tab>", '<C-W>W', { noremap = true, silent = true })


-- Git commands
vim.api.nvim_set_keymap("n", "<leader>gs", ':Git<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>gg", ':Git<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>gp', ':Git push<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>gP', ':Git pull<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>gd', ':Gdiff %<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>gl", ':LazyGit<CR>', { noremap = true, silent = true })

-- Neotree keybindings
vim.api.nvim_set_keymap("n", "<F4>", ':NvimTreeFocus<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<F5>", ':NvimTreeToggle<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>ft", ':NvimTreeToggle<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>nf", ':NeoTreeFloat<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>ns', ':Neotree ~/myrepos/setup<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>na', ':Neotree ~/myrepos/azla<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>nd', ':Neotree ~/myrepos/dotfiles<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>ng', ':Neotree ~/myrepos<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>nc', ':Neotree ~/.config<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>nn', ':Neotree ~/.config/nvim<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>nh', ':Neotree ~<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>n.', ':Neotree .<CR>', { noremap = true, silent = true })

-- Update plugins using lazy
vim.api.nvim_set_keymap('n', '<Leader>hr', ':Lazy<CR>', { noremap = true, silent = true })

-- Terminal
vim.api.nvim_set_keymap('n', '<Leader>tt', ':terminal<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>ok', ':terminal<CR>', { noremap = true, silent = true })

-- Save/load Session
vim.api.nvim_set_keymap('n', '<Leader>ss', ':SaveSession<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>sl', ':LoadSession<CR>', { noremap = true, silent = true })

-- Keybindings for Harpoon
local mark = require("harpoon.mark")
local ui   = require("harpoon.ui")

vim.keymap.set("n", "<leader>a", mark.add_file)
vim.keymap.set("n", "<C-e>", ui.toggle_quick_menu)
vim.api.nvim_set_keymap('n', '<Leader>h1', ':ToHarpoon 1<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>h2', ':ToHarpoon 2<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>h3', ':ToHarpoon 3<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>h4', ':ToHarpoon 4<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>h5', ':ToHarpoon 5<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>h6', ':ToHarpoon 6<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>h7', ':ToHarpoon 7<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>h8', ':ToHarpoon 8<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>h9', ':ToHarpoon 9<CR>', { noremap = true, silent = true })

-- Keybinding to save as sudo
vim.api.nvim_set_keymap('n', '<Leader>fs', ':SudaWrite<CR>', { noremap = true, silent = true })

-- Keybinding to open UndoTree
vim.api.nvim_set_keymap("n", "<Leader>u", ':UndotreeToggle<CR>', { noremap = true, silent = true })

-- Jump back to your dashboard
vim.api.nvim_set_keymap('n', '<Leader>d', ':Dashboard<CR>', { noremap = true, silent = true })

-- Keybindings for telescope
local builtin = require('telescope.builtin')
vim.api.nvim_set_keymap('n', '<Leader>ff', ':Telescope find_files<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>gf', ':Telescope git_files<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>ht', ':Telescope colorscheme<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', '<Leader>fb', ':Telescope file_browser<CR>', { noremap = true, silent = true })
vim.keymap.set('n', '<Leader>fg', function()
builtin.grep_string({ search = vim.fn.input("Grep >") } );

end)

require("telescope").load_extension("recent_files")

vim.api.nvim_set_keymap("n", "<Leader>fr",
  [[<cmd>lua require('telescope').extensions.recent_files.pick()<CR>]],
  {noremap = true, silent = true})

require("telescope").load_extension "file_browser"

-- ORGMODE Tangle
vim.api.nvim_set_keymap('n', '<Leader>oT', ':OrgTangle<CR>', { noremap = true, silent = true })

-- Terminal mode
vim.api.nvim_set_keymap('t', '<Esc>', '<C-\\><C-n>', {noremap = true})



#+END_SRC

#+RESULTS:

** STANDARD SETS
Some standard neovim settings based on your prefrence
like line numbers,save undo after session etc.
Read documentation for some more settings you can do
#+begin_src lua :tangle lua/karl/set.lua
vim.wo.relativenumber = true
vim.opt.nu = true

vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.shiftwidth = 4
vim.opt.tabstop = 4
vim.opt.expandtab = true

vim.opt.smartindent = true

vim.opt.wrap = false

vim.opt.swapfile = false
vim.opt.backup = false
vim.opt.undodir = os.getenv("HOME") .. "/.vim/undodir"
vim.opt.undofile = true

vim.opt.hlsearch = false
vim.opt.incsearch = true

vim.opt.termguicolors = true

vim.opt.scrolloff = 8
vim.opt.signcolumn = "yes"
vim.opt.isfname:append("@-@")

vim.opt.updatetime = 50
--
vim.opt.updatetime = 50

vim.o.modifiable = true

vim.opt.clipboard = "unnamedplus"
vim.opt.paste = true
#+end_src

** PLUGINS
Here is all my configs for the various Plugins I have installed.

*** BARBAR 
Configuration for the barbar tabbar

#+begin_src lua :tangle after/plugin/barbar.lua

vim.g.barbar_auto_setup = false -- disable auto-setup

require'barbar'.setup {
  -- WARN: do not copy everything below into your config!
  --       It is just an example of what configuration options there are.
  --       The defaults are suitable for most people.

  -- Enable/disable animations
  animation = true,

  -- Enable/disable auto-hiding the tab bar when there is a single buffer
  auto_hide = false,

  -- Enable/disable current/total tabpages indicator (top right corner)
  tabpages = true,

  -- Enables/disable clickable tabs
  --  - left-click: go to buffer
  --  - middle-click: delete buffer
  clickable = true,

  -- Excludes buffers from the tabline
  exclude_ft = {'javascript'},
  exclude_name = {'package.json'},

  -- A buffer to this direction will be focused (if it exists) when closing the current buffer.
  -- Valid options are 'left' (the default), 'previous', and 'right'
  focus_on_close = 'left',

  -- Hide inactive buffers and file extensions. Other options are `alternate`, `current`, and `visible`.
  hide = {extensions = true, inactive = true},

  -- Disable highlighting alternate buffers
  highlight_alternate = false,

  -- Disable highlighting file icons in inactive buffers
  highlight_inactive_file_icons = false,
  
  -- If true, new buffers will be inserted at the start/end of the list.
  -- Default is to insert after current buffer.
  insert_at_end = false,
  insert_at_start = false,

  -- Sets the maximum padding width with which to surround each tab
  maximum_padding = 1,

  -- Sets the minimum padding width with which to surround each tab
  minimum_padding = 1,

  -- Sets the maximum buffer name length.
  maximum_length = 30,

  -- Sets the minimum buffer name length.
  minimum_length = 0,

  -- If set, the letters for each buffer in buffer-pick mode will be
  -- assigned based on their name. Otherwise or in case all letters are
  -- already assigned, the behavior is to assign letters in order of
  -- usability (see order below)
  semantic_letters = true,

  -- Set the filetypes which barbar will offset itself for
  sidebar_filetypes = {
    -- Use the default values: {event = 'BufWinLeave', text = nil}
    NvimTree = true,
    -- Or, specify the text used for the offset:
    undotree = {text = 'undotree'},
    -- Or, specify the event which the sidebar executes when leaving:
    ['neo-tree'] = {event = 'BufWipeout'},
    -- Or, specify both
    Outline = {event = 'BufWinLeave', text = 'symbols-outline'},
  },

  -- New buffer letters are assigned in this order. This order is
  -- optimal for the qwerty keyboard layout but might need adjustment
  -- for other layouts.
  letters = 'asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP',

  -- Sets the name of unnamed buffers. By default format is "[Buffer X]"
  -- where X is the buffer number. But only a static string is accepted here.
  no_name_title = nil,
}


#+end_src


*** COLORS
Sets colorscheme inside of neovim and configure neovim highlights.
Neovim highlights is a life saver when working with new colorschemes.
It is an absolute most have for me. Just do SPC c h to toggle it on and off
#+begin_src lua  :tangle after/plugin/colors.lua
function ColorMyPencils(color)
       color = color or "iceberg"
       vim.cmd.colorscheme(color)
    -- vim.api.nvim_set_hl(0, "Normal", { bg = "none" })
    -- vim.api.nvim_set_hl(0, "NormalFloat", { bg = "none" })
end

require("nvim-highlight-colors").turnOff()
require("nvim-highlight-colors").turnOn()
require("nvim-highlight-colors").toggle()


ColorMyPencils()
#+end_src

*** HARPOON
#+begin_src lua :tangle after/plugin/harpoon.lua
local mark = require("harpoon.mark")
local ui   = require("harpoon.ui")

function to_harpoon(arg)
   ui.nav_file(arg)
end

vim.cmd("command! -nargs=1 ToHarpoon lua to_harpoon(tonumber(<f-args>))")

#+end_src


*** ICEBERG
#+begin_src lua :tangle after/plugin/iceberg.lua
-- Lua
require('iceberg').setup  {
    -- Main options --
    transparent = false,  -- Show/hide background
    term_colors = true, -- Change terminal color as per the selected theme style
    ending_tildes = false, -- Show the end-of-buffer tildes. By default they are hidden
    cmp_itemkind_reverse = false, -- reverse item kind highlights in cmp menu

    -- Change code style ---
    -- Options are italic, bold, underline, none
    -- You can configure multiple style with comma separated, For e.g., keywords = 'italic,bold'
    code_style = {
        comments = 'italic',
        keywords = 'none',
        functions = 'none',
        strings = 'none',
        variables = 'italic'
    },

    -- Lualine options --
    lualine = {
        transparent = false, -- lualine center bar transparency
    },

    -- Custom Highlights --
    colors = {}, -- Override default colors
    highlights = {}, -- Override highlight groups

    -- Plugins Config --
    diagnostics = {
        darker = false, -- darker colors for diagnostic
        undercurl = true,   -- use undercurl instead of underline for diagnostics
        background = true,    -- use background color for virtual text
    },
}
#+end_src
*** LASTPLACE
Lastplace never starts at the top of your files again.
If you exit a file and come back this plugin will remeber your last location
#+begin_src lua :tangle after/plugin/lastplace.lua
require'nvim-lastplace'.setup {
    lastplace_ignore_buftype = {"quickfix", "nofile", "help"},
    lastplace_ignore_filetype = {"gitcommit", "gitrebase", "svn", "hgcommit"},
    lastplace_open_folds = true
}

#+end_src
*** LSP-ZERO
Configure LSP zero for autocompletion and a ton of other features.
Check it's github for more info because you can do a ton with this plugin.
#+begin_src lua :tangle after/plugin/lsp.lua
local lsp = require('lsp-zero')

lsp.preset('recommended')


lsp.on_attach(function(client, bufnr)
  lsp.default_keymaps({buffer = bufnr})
end)

-- When you don't have mason.nvim installed
-- You'll need to list the servers installed in your system
lsp.setup_servers({'tsserver', 'eslint'})

lsp.set_preferences({
	sign_icons = { }
})

local cmp = require('cmp')
local cmp_select = {behavior = cmp.SelectBehavior.Select}
local cmp_mappings = lsp.defaults.cmp_mappings({
	['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
	['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
	['<C-y>'] = cmp.mapping.confirm({ select = true }),
	['<C-Space>'] = cmp.mapping.complete(),
})


lsp.setup()

#+end_src
*** LUALINE
Settings for lualine which is the status bar you see att the bottom of neovim.
Here you can customize it to your liking
#+begin_src lua :tangle after/plugin/lualine.lua
require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'auto',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    globalstatus = false,
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff', 'diagnostics'},
    lualine_c = {'filename'},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {}
  },
  tabline = {},
  winbar = {},
  inactive_winbar = {},
  extensions = {}
}


#+end_src
*** NEOTREE
Some configurations for neotree
#+begin_src lua :tangle after/plugin/neotree.lua

vim.g.neotree_auto_open = 1
vim.g.neotree_quit_on_open = 1
vim.g.neotree_hide_dotfiles = 0

#+end_src
*** ORGMODE
Settings for orgmode inside of Neovim so you get syntax highlightning inside of Neovim in orgmode.
Similar to emacs but please keep in mind that you wont have the same features as in emacs.
#+begin_src lua :tangle after/plugin/orgmode.lua
-- init.lua

-- Load custom treesitter grammar for org filetype
require('orgmode').setup_ts_grammar()

-- Treesitter configuration
require('nvim-treesitter.configs').setup {
  -- If TS highlights are not enabled at all, or disabled via `disable` prop,
  -- highlighting will fallback to default Vim syntax highlighting
  highlight = {
    enable = true,
    -- Required for spellcheck, some LaTex highlights and
    -- code block highlights that do not have ts grammar
    additional_vim_regex_highlighting = {'org'},
  },
  ensure_installed = {'org'}, -- Or run :TSUpdate org
}


require('orgmode').setup({
  org_agenda_files = {'~/Dropbox/org/*', '~/my-orgs/**/*'},
  org_default_notes_file = '~/Dropbox/org/refile.org',
})

function tangle_files()
  -- Get the current buffer's path
  local current_file = vim.api.nvim_buf_get_name(0)

  -- Execute the org-babel-tangle command in Emacs
  local command = "silent !emacsclient -e '(org-babel-tangle-file \"" .. current_file .. "\")'"
  local match = string.match(current_file, "org")

  if match == "org" then
     print(current_file .. " tangled")
     vim.api.nvim_command(command)
  else
     print(current_file .. " is not an org document")
  end

end

-- Register the command
vim.cmd("command! OrgTangle lua tangle_files()")

#+end_src


*** TREESITTER
Syntax highlighning is way better with this plugin activated
#+begin_src lua :tangle after/plugin/treesitter.lua
require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all" (the five listed parsers should always be installed)
 ensure_installed = { "javascript", "typescript", "c", "lua", "vim", "vimdoc", "query" },

 -- Install parsers synchronously (only applied to `ensure_installed`)
 sync_install = false,

 -- Automatically install missing parsers when entering buffer
 -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
 auto_install = true,

 highlight = {
   enable = true,

   -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
   -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
   -- Using this option may slow down your editor, and you may see some duplicate highlights.
   -- Instead of true it can also be a list of languages
   additional_vim_regex_highlighting = false,
 },
}
#+end_src


*** WHICHKEY
Settings for whichkey which is what you see when your
press your leader key and wait for a few seconds.
It's very similar to the one you see in emacs but less useful in my opninion.
Because there is just less keybindings to remember in vim
#+begin_src lua :tangle after/plugin/whichkey.lua

local wk = require("which-key")

wk.register({
  f = {
    name = "Find Files", -- optional group name
    g = {"Grep for string"},
    v = {"Built-in-explorer"},
  },
  n = {
    name = "File Tree"
  },
  o = {
    name = "Org Mode"
  },
  b = {
    name = "Buffers"
  },
  g = {
    name = "Git"
  },
  c = {
    name = "Color"
  },
  h = {
    name = "Help",
    s = {"Source-file"},
  },
  a = {
    name = "Add-Harpoon"
  },
  t = {
    name = "Tab"
  },
  s = {
    name = "Session"
  },


}, { prefix = "<leader>" })

#+end_src
