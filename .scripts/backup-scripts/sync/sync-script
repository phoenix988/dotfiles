#!/usr/bin/env bash

DOTFILES_REPO_PATH="$HOME/myrepos/dotfiles"
DMSCRIPTS_REPO_PATH="$HOME/myrepos/dmscripts"

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)

declare -A files

files[$HOME/.dmenu]="$DMSCRIPTS_REPO_PATH/.dmenu"

files[$HOME/.scripts/activated]="$DOTFILES_REPO_PATH/.scripts/activated"
files[$HOME/.scripts/restart]="$DOTFILES_REPO_PATH/.scripts/restart"
files[$HOME/.scripts/backup-scripts/sync]="$DOTFILES_REPO_PATH/.scripts/backup-scripts/sync"
files[$HOME/.scripts/backup-scripts/btrfs]="$DOTFILES_REPO_PATH/.scripts/backup-scripts/btrfs"
files[$HOME/.scripts/backup-scripts/yandex-script]="$DOTFILES_REPO_PATH/.scripts/yandex-script"

files[$HOME/.scripts/docker]="$DOTFILES_REPO_PATH/.scripts/docker"

files[$HOME/.zshrc]="$DOTFILES_REPO_PATH/.zshrc"
files[$HOME/.bashrc]="$DOTFILES_REPO_PATH/.bashrc"
files[$HOME/.config/bash]="$DOTFILES_REPO_PATH/.config/bash"
files[$HOME/.config/kitty/kitty.conf]="$DOTFILES_REPO_PATH/.config/kitty/kitty.conf"
files[$HOME/.config/alacritty]="$DOTFILES_REPO_PATH/.config/alacritty"
files[$HOME/.config/starship.toml]="$DOTFILES_REPO_PATH/.config/starship.toml"
files[$HOME/.config/qtile/config.py]="$DOTFILES_REPO_PATH/.config/qtile/config.py"
files[$HOME/.config/qtile/autostart.sh]="$DOTFILES_REPO_PATH/.config/qtile/autostart.sh"
files[$HOME/.config/qtile/themes]="$DOTFILES_REPO_PATH/.config/qtile/themes"
files[$HOME/.config/hypr]="$DOTFILES_REPO_PATH/.config/hypr"
files[$HOME/.config/waybar/config.jsonc]="$DOTFILES_REPO_PATH/.config/waybar/config.jsonc"
files[$HOME/.config/waybar/style.css]="$DOTFILES_REPO_PATH/.config/waybar/style.css"
files[$HOME/.config/vifm/vifmrc]="$DOTFILES_REPO_PATH/.config/vifm/vifmrc"
files[$HOME/.config/wlogout]="$DOTFILES_REPO_PATH/.config/wlogout"
files[$HOME/.config/rofi/themes]="$DOTFILES_REPO_PATH/.config/rofi/themes"
files[$HOME/.config/rofi/config.rasi]="$DOTFILES_REPO_PATH/.config/rofi/config.rasi"
files[$HOME/.config/wofi]="$DOTFILES_REPO_PATH/.config/wofi"
files[$HOME/.config/doom]="$DOTFILES_REPO_PATH/.config/doom"
files[$HOME/.config/doom/eshell]="$DOTFILES_REPO_PATH/.config/doom/eshell"
files[$HOME/.config/nvim/init.vim]="$DOTFILES_REPO_PATH/.config/nvim/init.vim"
files[$HOME/.config/nvim/vim-plug]="$DOTFILES_REPO_PATH/.config/nvim/vim-plug"
files[$HOME/.config/alias-zsh-bash]="$DOTFILES_REPO_PATH/.config/alias-zsh-bash"
files[$HOME/.config/fish/conf.d/alias.fish]="$DOTFILES_REPO_PATH/.config/fish/conf.d/alias.fish"
files[$HOME/.config/fish/config.fish]="$DOTFILES_REPO_PATH/.config/fish/config.fish"
files[$HOME/.tmux.conf.local]="$DOTFILES_REPO_PATH/.tmux.conf.local"
files[$HOME/.config/qutebrowser/config.py]="$DOTFILES_REPO_PATH/.config/qutebrowser/config.py"
files[$HOME/.config/qutebrowser/quickmarks]="$DOTFILES_REPO_PATH/.config/qutebrowser/quickmarks"

while getopts ":f:v" opt; do
  case $opt in
     f)
      file="$OPTARG"
      ;;
     v)
      flag=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

for COMPARE in $(printf '%s\n' "${!files[@]}") ; do

if [ -d $COMPARE ] ; then

       SOURCE=$(printf '%s\n' $(printf '%s\n' "${files["${COMPARE}"]}") )

for SOURCE_LOOP in $(find  $SOURCE/* -type f ) ; do

       DEST=$(echo $SOURCE_LOOP | sed -e "s|$DMSCRIPTS_REPO_PATH|$HOME|"  -e "s|$DOTFILES_REPO_PATH|$HOME|" )

if cmp --quiet $DEST $SOURCE_LOOP ; then

    if [ -z $DEST  ] ; then

       echo "" &> /dev/null

    else


       if [ "$flag" = 'true' ] ; then


             [ -z $DEST ] && echo "" &> /dev/null || echo -e "${RED}-- No Change Detected: ${DEST}"

       fi

    fi

else

       CHECK_FOR_LATEST=$(ls -lt  $DEST $SOURCE_LOOP 2> /dev/null | head -n1 | awk '{print $NF}')

if [ "$CHECK_FOR_LATEST" = "$DEST" ] ; then

       LATEST=$(echo $CHECK_FOR_LATEST)
       OLDEST=$(echo $SOURCE_LOOP)

elif [ "$CHECK_FOR_LATEST" = "$SOURCE_LOOP" ] ; then

       LATEST=$(echo $CHECK_FOR_LATEST)
       OLDEST=$(echo $DEST)

fi

       SAME_NAME_OLDEST=$(echo $OLDEST | awk  -F / '{print $NF}')
       SAME_NAME_LATEST=$(echo $LATEST | awk  -F / '{print $NF}')


if [ "$SAME_NAME_OLDEST" = "$SAME_NAME_LATEST" ] ; then

       cp -r $LATEST $OLDEST 2> /dev/null

       if [ "$flag" = 'true' ] ; then

       [ -z $LATEST ] && echo "" &> /dev/null || echo -e "${GREEN}++ Moving: ${LATEST} to ${OLDEST}"

       sleep 1

       fi
fi

fi


done

elif [ -f $COMPARE ] ; then


      COMPARE_WITH=$(printf '%s\n' "${files["${COMPARE}"]}")

if cmp --quiet $COMPARE $COMPARE_WITH ; then


    if [ -z $COMPARE  ] ; then

       echo "" &> /dev/null

    else


       if [ "$flag" = 'true' ] ; then

      [ -z $COMPARE ] && echo "" &> /dev/null || echo -e "${RED}-- No Change Detected: ${COMPARE}"


       fi

    fi


else

      CHECK_FOR_LATEST=$(ls -lt  $COMPARE_WITH $COMPARE 2> /dev/null | head -n1 | awk '{print $NF}')

if [ "$CHECK_FOR_LATEST" = "$COMPARE" ] ; then

      LATEST=$(echo $CHECK_FOR_LATEST)
      OLDEST=$(echo $COMPARE_WITH)

elif [ "$CHECK_FOR_LATEST" = "$COMPARE_WITH" ] ; then

      LATEST=$(echo $CHECK_FOR_LATEST)
      OLDEST=$(echo $COMPARE)

fi

      SAME_NAME_OLDEST=$(echo $OLDEST | awk  -F / '{print $NF}')
      SAME_NAME_LATEST=$(echo $LATEST | awk  -F / '{print $NF}')


if [ "$SAME_NAME_OLDEST" = "$SAME_NAME_LATEST" ] ; then

     cp -r $LATEST $OLDEST 2> /dev/null

       if [ "$flag" = 'true' ] ; then


          [ -z $LATEST ] && echo "" &> /dev/null || echo -e "${GREEN}++ Moving: ${LATEST} to ${OLDEST}"

          sleep 1

       fi


fi

fi

fi

done
