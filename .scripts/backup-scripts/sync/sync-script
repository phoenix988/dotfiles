#!/bin/bash
##____  _                      _
#|  _ \| |__   ___   ___ _ __ (_)_  __
#| |_) | '_ \ / _ \ / _ \ '_ \| \ \/ /
#|  __/| | | | (_) |  __/ | | | |>  <
#|_|   |_| |_|\___/ \___|_| |_|_/_/\_\
#
# -*- coding: utf-8 -*-

#script that will compare all my config files and scripts to keep them up to date
#if it detect one change its gonna update to all my locations so I always have the latest version
#in my github repos etc
DOTFILES_REPO_PATH="$HOME/myrepos/dotfiles"
DMSCRIPTS_REPO_PATH="$HOME/myrepos/dmscripts"


declare -A files

# dmscripts
files[$HOME/.dmenu]="$DMSCRIPTS_REPO_PATH/.dmenu"
files[$HOME/.config]="$DMSCRIPTS_REPO_PATH/.config"

# Scripts
files[$HOME/.scripts/activated]="$DOTFILES_REPO_PATH/.scripts/activated"
files[$HOME/.scripts/restart]="$DOTFILES_REPO_PATH/.scripts/restart"
files[$HOME/.scripts/backup-scripts/sync]="$DOTFILES_REPO_PATH/.scripts/backup-scripts/sync"
files[$HOME/.scripts/backup-scripts/btrfs]="$DOTFILES_REPO_PATH/.scripts/backup-scripts/btrfs"
files[$HOME/.scripts/backup-scripts/yandex-script]="$DOTFILES_REPO_PATH/.scripts/yandex-script"

# Docker
files[$HOME/.scripts/docker]="$DOTFILES_REPO_PATH/.scripts/docker"

# Alias files
files[$HOME/Documents/lists]="$DOTFILES_REPO_PATH/Documents/lists"

# Config files
files[$HOME/.zshrc]="$DOTFILES_REPO_PATH/.zshrc"
files[$HOME/.config/bash]="$DOTFILES_REPO_PATH/.config/bash"
files[$HOME/.config/kitty/kitty.conf]="$DOTFILES_REPO_PATH/.config/kitty/kitty.conf"
files[$HOME/.config/starship.toml]="$DOTFILES_REPO_PATH/.zshrc"
files[$HOME/.config/qtile/config.py]="$DOTFILES_REPO_PATH/.config/qtile/config.py"
files[$HOME/.config/qtile/autostart.sh]="$DOTFILES_REPO_PATH/.config/qtile/autostart.sh"
files[$HOME/.config/hypr]="$DOTFILES_REPO_PATH/.config/hypr"
files[$HOME/.config/waybar/config.jsonc]="$DOTFILES_REPO_PATH/.config/waybar/config.jsonc"
files[$HOME/.config/waybar/style.css]="$DOTFILES_REPO_PATH/.config/waybar/style.css"
files[$HOME/.config/vifm/vifmrc]="$DOTFILES_REPO_PATH/.config/vifm/vifmrc"
files[$HOME/.config/wlogout]="$DOTFILES_REPO_PATH/.config/wlogout"
files[$HOME/.config/wofi]="$DOTFILES_REPO_PATH/.config/wofi"
files[$HOME/.config/doom]="$DOTFILES_REPO_PATH/.config/doom"
files[$HOME/.config/nvim/init.vim]="$DOTFILES_REPO_PATH/.config/nvim/init.vim"
files[$HOME/.config/nvim/vim-plug]="$DOTFILES_REPO_PATH/.config/nvim/vim-plug"
files[$HOME/.config/oh-my-zsh/aliases.sh]="$DOTFILES_REPO_PATH/.config/oh-my-zsh/aliases.sh"
files[$HOME/.tmux.conf.local]="$DOTFILES_REPO_PATH/.tmux.conf.local"

for COMPARE in $(printf '%s\n' "${!files[@]}") ; do

if [ -d $COMPARE ] ; then

SOURCE=$(printf '%s\n' $(printf '%s\n' "${files["${COMPARE}"]}") )



for SOURCE_LOOP in $(ls  $SOURCE/* ) ; do


DEST=$(echo $SOURCE_LOOP | sed -e "s|$DMSCRIPTS_REPO_PATH|$HOME|"  -e "s|$DOTFILES_REPO_PATH|$HOME|" )

if cmp --quiet $DEST $SOURCE_LOOP ; then

    printf '%s\n' "No Change Detected: $DEST"

else

CHECK_FOR_LATEST=$(ls -lt  $DEST $SOURCE_LOOP 2> /dev/null | head -n1 | awk '{print $NF}')

if [ "$CHECK_FOR_LATEST" = "$DEST" ] ; then

    LATEST=$(echo $CHECK_FOR_LATEST)
    OLDEST=$(echo $SOURCE_LOOP)

elif [ "$CHECK_FOR_LATEST" = "$SOURCE_LOOP" ] ; then

    LATEST=$(echo $CHECK_FOR_LATEST)
    OLDEST=$(echo $DEST)

fi

SAME_NAME_OLDEST=$(echo $OLDEST | awk  -F / '{print $NF}')
SAME_NAME_LATEST=$(echo $LATEST | awk  -F / '{print $NF}')


if [ "$SAME_NAME_OLDEST" = "$SAME_NAME_LATEST" ] ; then

cp -r $LATEST $OLDEST 2> /dev/null

printf '%s\n' "Moving: $LATEST to $OLDEST"

sleep 1

fi

fi


done


elif [ -f $COMPARE ] ; then


COMPARE_WITH=$(printf '%s\n' "${files["${COMPARE}"]}")

if cmp --quiet $COMPARE $COMPARE_WITH ; then

  printf '%s\n' "No Change Detected: $COMPARE"

else

CHECK_FOR_LATEST=$(ls -lt  $COMPARE_WITH $COMPARE 2> /dev/null | head -n1 | awk '{print $NF}')

if [ "$CHECK_FOR_LATEST" = "$COMPARE" ] ; then

    LATEST=$(echo $CHECK_FOR_LATEST)
    OLDEST=$(echo $COMPARE_WITH)

elif [ "$CHECK_FOR_LATEST" = "$COMPARE_WITH" ] ; then

    LATEST=$(echo $CHECK_FOR_LATEST)
    OLDEST=$(echo $COMPARE)

fi

SAME_NAME_OLDEST=$(echo $OLDEST | awk  -F / '{print $NF}')
SAME_NAME_LATEST=$(echo $LATEST | awk  -F / '{print $NF}')


if [ "$SAME_NAME_OLDEST" = "$SAME_NAME_LATEST" ] ; then

cp -r $LATEST $OLDEST 2> /dev/null

printf '%s\n' "Moving: $LATEST to $OLDEST"

sleep 1

fi

fi

fi

done
