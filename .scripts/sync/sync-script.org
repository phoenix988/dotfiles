#+title: Sync Script
#+DESCRIPTION: This script will sync choosen dotfiles, script etc with my git repos
#+AUTHOR: Karl Fredin
#+PROPERTY: header-args :tangle sync-script
#+STARTUP: showeverything

* TABLE OF CONTENT
- [[ABOUT THIS SCRIPT][ABOUT]]
- [[EXAMPLE]]
- [[VARIABLES]]
  - [[SCRIPT PATHS]]
  - [[CONFIG PATHS]]
  - [[OTHER VARIABLES]]
- [[SCRIPT]]
  - [[VARIABLES]]
  - [[CASES]]
  - [[FUNCTIONS]]
  - [[MAIN]]

** ABOUT THIS SCRIPT
This is a script I wrote to make it easier to keep my gitrepos up to date.
Basically this script will compare 2 files that you specify in the files array
And if it detecs that there is a diffrent in the 2 files or folders this script
will copy over the newest file using the basic command cp. Per default this
script have no output but if you specify -v than you will see which files
this script are overwriting or if there is no change detected. you can also
specify -f to specify a file where you want to store the output in case you want to
inspect it later. You can also combine the two switches

** EXAMPLE
This Example here will show you the which files it syncs
#+BEGIN_SRC
bash sync-script -v
#+END_SRC

*** VARIABLES
All the config files I declare in the array
**** SCRIPT PATHS
|------------------------------+---------------------------------------------|
| Scripts Home                 | Scripts Repo                                |
|------------------------------+---------------------------------------------|
| $HOME/.dmenu                 | $DMSCRIPTS_REPO_PATH/.dmenu                 |
| $HOME/.config/dm-script.conf | $DMSCRIPTS_REPO_PATH/.config/dm-script.conf |
| $HOME/.scripts               | $DOTFILES_REPO_PATH/.scripts                |

**** CONFIG PATHS
|------------------------+--------------------------------------|
| Config Path Home       | Config Path Repos                    |
|------------------------+--------------------------------------|
| $HOME/.zshrc           | $DOTFILES_REPO_PATH/.zshrc           |
| $HOME/.bashrc          | $DOTFILES_REPO_PATH/.bashrc          |
| $HOME/.tmux.conf.local | $DOTFILES_REPO_PATH/.tmux.conf.local |
| $HOME/.config          | $DOTFILES_REPO_PATH/.config          |
| $HOME/.xmonad          | $DOTFILES_REPO_PATH/.xmonad          |


**** OTHER VARIABLES
Some other variables I set. Like paths and color
|---------------------+------------------------|
| Variable            | Value                  |
|---------------------+------------------------|
| DOTFILES_REPO_PATH  | HOME/myrepos/dotfiles  |
| DMSCRIPTS_REPO_PATH | HOME/myrepos/dmscripts |
| GREEN               | tput setaf 2           |
| RED                 | tput setaf 1           |

*** SCRIPT
**** VARIABLES
#+BEGIN_SRC sh :tangle sync-script
#!/usr/bin/env bash

DATE=$(date +%d-%h-%Y-%H-%M)

DOTFILES_REPO_PATH="$HOME/myrepos/dotfiles"
DMSCRIPTS_REPO_PATH="$HOME/myrepos/dmscripts"

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)

declare -A files

# Scripts
files[$HOME/.dmenu]="$DMSCRIPTS_REPO_PATH/.dmenu"
files[$HOME/.config/dm-script.conf]="$DMSCRIPTS_REPO_PATH/.config/dm-script.conf"
files[$HOME/.scripts]="$DOTFILES_REPO_PATH/.scripts"
files[$HOME/.config]="$DOTFILES_REPO_PATH/.config"
files[$HOME/.xmonad]="$DOTFILES_REPO_PATH/.xmonad"


# zshrc
files[$HOME/.zshrc]="$DOTFILES_REPO_PATH/.zshrc"

# Bashrc
files[$HOME/.bashrc]="$DOTFILES_REPO_PATH/.bashrc"

# Tmux
files[$HOME/.tmux.conf.local]="$DOTFILES_REPO_PATH/.tmux.conf.local"


#+END_SRC


**** CASES
This lets us specify -f (file) and -v (verbose)
as options in the script, -f requires an argument.
-c will only output the files that have changed.
if you dont specify a switch then it will simply not output anything
#+BEGIN_SRC sh :tangle sync-script
while getopts ":f:vc" opt; do
  case $opt in
     f)
      file="$OPTARG"
      ;;
     v)
      flag=true
      ;;
     c)
      only_change=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
#+END_SRC
**** FUNCTIONS
Makes some functions that I will use later in the script for the output this script does.
just using echo to accomplish this
#+BEGIN_SRC sh :tangle sync-script
NO_CHANGE() {
echo -e "${1}-- No Change Detected: ${DEST}"
}

YES_CHANGE() {
echo -e "${1}++ Moving: ${LATEST} to ${OLDEST}"
}
#+END_SRC

**** MAIN
This is the main function that makes this script work.
Bascially first if it detects the target is a directory or file.
If its a directory then its gonna search the directory recusivly
and then compare all the files inside that directory to detects a diffrent.
If it's just a file then it will simply compare the 2 files to detect a diffrent.
I'm creating a few loops to loop through the array and directories.
And then I'm using an IF statement to compare the file using diff.
Also I mainly use this for the .config directory to keep it up to date with my
dotfiles repository. And I made it so I don't need to add every single directory under config
I wan't to sync, in the array manually. I just need to add .config folder. And It will loop
through all the directories and skip all the folders that is not in the dotfiles repo
#+BEGIN_SRC sh :tangle sync-script
for COMPARE in $(printf '%s\n' "${!files[@]}") ; do

   COMPARE_SRC=$(printf '%s\n' "${files[$COMPARE]}")

   if [ -d $COMPARE ] && [ -d $COMPARE_SRC ] ; then

      SOURCE=$(printf '%s\n' $(printf '%s\n' "${files["${COMPARE}"]}") )

      for SOURCE_LOOP in $(find  $SOURCE/* -type f ) ; do

         DEST=$(echo $SOURCE_LOOP | sed -e "s|$DMSCRIPTS_REPO_PATH|$HOME|"  -e "s|$DOTFILES_REPO_PATH|$HOME|" )

         if cmp --quiet $DEST $SOURCE_LOOP ; then

            if [ -z $DEST  ] ; then

               echo "" &> /dev/null

            else

               [ -z $file ] || NO_CHANGE >> $file


               if [ "$flag" = 'true' ] ; then

                   [ "$only_change" = "true" ] || [ -z $DEST ] && echo "" &> /dev/null || NO_CHANGE $RED

               fi

            fi

         else

            CHECK_FOR_LATEST=$(ls -lt  $DEST $SOURCE_LOOP 2> /dev/null | head -n1 | awk '{print $NF}')

            if [ "$CHECK_FOR_LATEST" = "$DEST" ] ; then

                LATEST=$(echo $CHECK_FOR_LATEST)
                OLDEST=$(echo $SOURCE_LOOP)

            elif [ "$CHECK_FOR_LATEST" = "$SOURCE_LOOP" ] ; then

                 LATEST=$(echo $CHECK_FOR_LATEST)
                 OLDEST=$(echo $DEST)

            fi

                 SAME_NAME_OLDEST=$(echo $OLDEST | awk  -F / '{print $NF}')
                 SAME_NAME_LATEST=$(echo $LATEST | awk  -F / '{print $NF}')


            if [ "$SAME_NAME_OLDEST" = "$SAME_NAME_LATEST" ] ; then

            if [ -f "$OLDEST" ] && [ -f "$LATEST" ]; then

               cp -r $LATEST $OLDEST 2> /dev/null

               [ -z $file ] ||  YES_CHANGE >> $file

               if [ "$flag" = 'true' ] ; then

                   [ -z $LATEST ] && echo "" &> /dev/null || YES_CHANGE $GREEN

                   sleep 1

               fi

            else
                   echo "" &> /dev/null

            fi

         fi

      fi
   
   
      done
        
#+END_SRC

This is the if statement it runs when it detects a file and not a folder.
It runs when both the variable exist and are text files.
#+BEGIN_SRC sh :tangle sync-script
   elif [ -f "$COMPARE" ] && [ -f "$COMPARE_SRC" ] ; then

         COMPARE_WITH=$(printf '%s\n' "${files["${COMPARE}"]}")
   
         DEST=$COMPARE
   
   if cmp --quiet $COMPARE $COMPARE_WITH ; then
   
       if [ -z $COMPARE  ] ; then

           echo "" &> /dev/null

        else

          [ -z $file ] || NO_CHANGE >> $file

          if [ "$flag" = 'true' ] ; then

             [ "$only_change" = "true" ] || [ -z $COMPARE ] && echo "" &> /dev/null || NO_CHANGE $RED

        fi

      fi

   else

         CHECK_FOR_LATEST=$(ls -lt  $COMPARE_WITH $COMPARE 2> /dev/null | head -n1 | awk '{print $NF}')

   if [ "$CHECK_FOR_LATEST" = "$COMPARE" ] ; then

         LATEST=$(echo $CHECK_FOR_LATEST)
         OLDEST=$(echo $COMPARE_WITH)

   elif [ "$CHECK_FOR_LATEST" = "$COMPARE_WITH" ] ; then

         LATEST=$(echo $CHECK_FOR_LATEST)
         OLDEST=$(echo $COMPARE)

   fi

         SAME_NAME_OLDEST=$(echo $OLDEST | awk  -F / '{print $NF}')
         SAME_NAME_LATEST=$(echo $LATEST | awk  -F / '{print $NF}')


         if [ "$SAME_NAME_OLDEST" = "$SAME_NAME_LATEST" ] ; then

             cp -r $LATEST $OLDEST 2> /dev/null

             [ -z $file ] ||  YES_CHANGE >> $file


             if [ "$flag" = 'true' ] ; then

                [ -z $LATEST ] && echo "" &> /dev/null || YES_CHANGE $GREEN

                 sleep 1

           fi

         fi

      fi

   fi

done
#+END_SRC
