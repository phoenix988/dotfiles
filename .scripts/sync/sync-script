#!/usr/bin/env bash

DATE=$(date +%d-%h-%Y-%H-%M)

DOTFILES_REPO_PATH="$HOME/myrepos/dotfiles"
DMSCRIPTS_REPO_PATH="$HOME/myrepos/dmscripts"

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)

declare -A files

# Scripts
files[$HOME/.dmenu]="$DMSCRIPTS_REPO_PATH/.dmenu"
files[$HOME/.scripts]="$DOTFILES_REPO_PATH/.scripts"
files[$HOME/.config]="$DOTFILES_REPO_PATH/.config"
files[$HOME/.xmonad]="$DOTFILES_REPO_PATH/.xmonad"


# zshrc
files[$HOME/.zshrc]="$DOTFILES_REPO_PATH/.zshrc"

# Bashrc
files[$HOME/.bashrc]="$DOTFILES_REPO_PATH/.bashrc"

# Tmux
files[$HOME/.tmux.conf.local]="$DOTFILES_REPO_PATH/.tmux.conf.local"

while getopts ":f:vc" opt; do
  case $opt in
     f)
      file="$OPTARG"
      ;;
     v)
      flag=true
      ;;
     c)
      only_change=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

NO_CHANGE() {
echo -e "${1}-- No Change Detected: ${DEST}"
}

YES_CHANGE() {
echo -e "${1}++ Moving: ${LATEST} to ${OLDEST}"
}

for COMPARE in $(printf '%s\n' "${!files[@]}") ; do

   COMPARE_SRC=$(printf '%s\n' "${files[$COMPARE]}")

   if [ -d $COMPARE ] && [ -d $COMPARE_SRC ] ; then

      SOURCE=$(printf '%s\n' $(printf '%s\n' "${files["${COMPARE}"]}") )

      for SOURCE_LOOP in $(find  $SOURCE/* -type f ) ; do

         DEST=$(echo $SOURCE_LOOP | sed -e "s|$DMSCRIPTS_REPO_PATH|$HOME|"  -e "s|$DOTFILES_REPO_PATH|$HOME|" )

         if cmp --quiet $DEST $SOURCE_LOOP ; then

            if [ -z $DEST  ] ; then

               echo "" &> /dev/null

            else

               [ -z $file ] || NO_CHANGE >> $file


               if [ "$flag" = 'true' ] ; then

                   [ "$only_change" = "true" ] || [ -z $DEST ] && echo "" &> /dev/null || NO_CHANGE $RED

               fi

            fi

         else

            CHECK_FOR_LATEST=$(ls -lt  $DEST $SOURCE_LOOP 2> /dev/null | head -n1 | awk '{print $NF}')

            if [ "$CHECK_FOR_LATEST" = "$DEST" ] ; then

                LATEST=$(echo $CHECK_FOR_LATEST)
                OLDEST=$(echo $SOURCE_LOOP)

            elif [ "$CHECK_FOR_LATEST" = "$SOURCE_LOOP" ] ; then

                 LATEST=$(echo $CHECK_FOR_LATEST)
                 OLDEST=$(echo $DEST)

            fi

                 SAME_NAME_OLDEST=$(echo $OLDEST | awk  -F / '{print $NF}')
                 SAME_NAME_LATEST=$(echo $LATEST | awk  -F / '{print $NF}')


            if [ "$SAME_NAME_OLDEST" = "$SAME_NAME_LATEST" ] ; then

            if [ -f "$OLDEST" ] && [ -f "$LATEST" ]; then

               cp -r $LATEST $OLDEST 2> /dev/null

               [ -z $file ] ||  YES_CHANGE >> $file

               if [ "$flag" = 'true' ] ; then

                   [ -z $LATEST ] && echo "" &> /dev/null || YES_CHANGE $GREEN

                   sleep 1

               fi

            else
                   echo "" &> /dev/null

            fi

         fi

      fi
   
   
      done

   elif [ -f $COMPARE ] && [ -f $COMPARE_SRC ] ; then
   
   
         COMPARE_WITH=$(printf '%s\n' "${files["${COMPARE}"]}")
   
         DEST=$COMPARE
   
   if cmp --quiet $COMPARE $COMPARE_WITH ; then
   
       if [ -z $COMPARE  ] ; then

           echo "" &> /dev/null

        else

          [ -z $file ] || NO_CHANGE >> $file

          if [ "$flag" = 'true' ] ; then

             [ "$only_change" = "true" ] || [ -z $COMPARE ] && echo "" &> /dev/null || NO_CHANGE $RED

        fi

      fi

   else

         CHECK_FOR_LATEST=$(ls -lt  $COMPARE_WITH $COMPARE 2> /dev/null | head -n1 | awk '{print $NF}')

   if [ "$CHECK_FOR_LATEST" = "$COMPARE" ] ; then

         LATEST=$(echo $CHECK_FOR_LATEST)
         OLDEST=$(echo $COMPARE_WITH)

   elif [ "$CHECK_FOR_LATEST" = "$COMPARE_WITH" ] ; then

         LATEST=$(echo $CHECK_FOR_LATEST)
         OLDEST=$(echo $COMPARE)

   fi

         SAME_NAME_OLDEST=$(echo $OLDEST | awk  -F / '{print $NF}')
         SAME_NAME_LATEST=$(echo $LATEST | awk  -F / '{print $NF}')


         if [ "$SAME_NAME_OLDEST" = "$SAME_NAME_LATEST" ] ; then

             cp -r $LATEST $OLDEST 2> /dev/null

             [ -z $file ] ||  YES_CHANGE >> $file


             if [ "$flag" = 'true' ] ; then

                [ -z $LATEST ] && echo "" &> /dev/null || YES_CHANGE $GREEN

                 sleep 1

           fi

         fi

      fi

   fi

done
